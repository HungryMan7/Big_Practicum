# main body
| <program> ::= { [ <vars-mdef>';' | <func> ] }

# symbols
| <letter> ::= 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|
|			   'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'|'_'		 
| <digit>  ::= '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'

# type & id
| <type> ::= "int" | "double" | "bool" | "char" | "array" | "string"
| <id>   ::= <letter> { [ <letter> | <digit> ] }

# expressions & statements
| <term>      ::= <id> | <literal> | '(' <expr> ')'
| <expr>      ::= <term> [ <math-op> | <log-op> ] <term> | <id> <ass-op> <term> | 
|		          <unary-op> <term> | [ "++" | "--" ] <id> | <id> [ "++" | "--" ] | <expr> ',' <expr>
| <statement> ::= <vars-mdef> ';' | <expr> ';' | <if> | <switch> ';' | <loop> | <func-call> ';' | "break;" | "continue;" | eps
| <body>      ::= '{' { <statement> } '}'

# literals
| <number>  ::= <digit><number> | <digit>
| <string>  ::= {letter}
| <literal> ::= <number> | <string>

# operators
| <unary-op> ::= '!' | '*' | '&'
| <math-op>  ::= '+' | '-' | '*' | '/' | '|' | '&' | '^'
| <log-op>   ::= '>' | '<' | "==" | "!="
| <ass-op>   ::= '=' | "+=" | "-=" | "*=" | "/=" | "|=" | "&=" | "^="

# vars
| <vars-mdef> ::= <type> <vars>
| <vars>      ::= <var-def> | <var-def> ',' <vars>
| <var-def>   ::= <id> | <id>=<expr>

# funcs
| <func>      ::= <type> <id> '(' [ <arguments> | void | eps ] ')' [ <body> | ';' ]
| <arguments> ::= <type> <id> | <type> <id> ',' <arguments>
| <func-call> ::= <id> '(' [ <arguments> | eps ] ')'

# if & switch
| <if>     ::= "if(" <expr> ')' <body> { "elif(" <expr> ')' <body> } [ "else" <body> | eps ]
| <switch> ::= "switch(" <expr> "){" { "case" <expr> ':' {<statement>} } [ "default:"{<statement>} | eps ] '}'

# loops
| <loop>         ::= "loop" <loop-type>
| <loop-type>    ::= <loop-while> | <loop-foreach> | <loop-for>
| <loop-while>   ::= '(' <expr> ')' <body>
| <loop-foreach> ::= '(' <id> ',' <expr> ')' <body>
| <loop-for>     ::= '(' [ <expr> | <vars-mdef> | eps ] ',' [ <expr> | eps ] ',' [ <expr> | eps ] ')' <body>
