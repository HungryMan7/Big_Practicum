# main body
| <program>          ::= <preprocessing>{<global-statement>}
| <preprocessing>    ::= {"#include"'<'<string>'>'"\n"}
| <global-statement> ::= <variables-multidefinition>';' | <function> | <comment>

# symbols
| <letter> ::= 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|
|			   'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'|'_'		 
| <digit>  ::= '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'

# type & id
| <type> ::= "int" | "double" | "bool" | "char" | "array" | "string"
| <id>   ::= <letter>{<letter>|<digit>}

# expressions & statements
| <term>           ::= <id> | <literal> | '('<expr>')'
| <expr>           ::= <term>[<math-operator> | <logical-operator>]<term> | <id>[<assignment-operator>]<term> | 
|		               <unary-operator><term> | ["++" | "--"]<id> | <id>["++" | "--"] | <expr>','<expr>
| <statement>      ::= <variables-multidefinition>';' | <expr>';' | <if> | <switch>';' | <loop> | <function-call>';' | "break"';' | "continue"';' | eps
| <body>           ::= '{'{<statement>}'}'

# literals
| <number>  ::= <digit><number> | <digit>
| <string>  ::= {letter}
| <literal> ::= <number> | <string>

# operators
| <unary-operator>       ::= '!' | '*' | '&'
| <math-operator>        ::= '+' | '-' | '*' | '/' | '|' | '&' | '^'
| <logical-operator>     ::= '>' | '<' | "==" | "!="
| <assignment-operator>  ::= '=' | "+=" | "-=" | "*=" | "/=" | "|=" | "&=" | "^="

# variables
| <variables-multidefinition> ::= <type><variables>
| <variables>                 ::= <variable-definition> | <variable-definition>,<variables>
| <variable-definition>       ::= <id> | <id>=<expr>

# functions
| <function>      ::= <type><id>([<arguments> | void | eps])[<body> | ';']
| <arguments>     ::= <type><id> | <type><id>,<arguments>
| <function-call> ::= <id>'('[<arguments> | eps]')'

# if & switch
| <if>     ::= "if"'('<expr>')'<body>{"elif"<body>'('<expr>')'<body>}["else"<body> | eps]
| <switch> ::= "switch"'('<expr>')''{'{"case"<expr>':'{<statement>}}["default:"{<statement>} | eps]'}'

# loops
| <loop>         ::= "loop"<loop-type>
| <loop-type>    ::= <loop-while> | <loop-foreach> | <loop-for>
| <loop-while>   ::= '('<expr>')'<body>
| <loop-foreach> ::= '('<id>','<expr>')'<body>
| <loop-for>     ::= '('[<expr> | <variables-multidefinition> | eps]','[<expr> | eps]','[<expr> | eps]')'<body>
